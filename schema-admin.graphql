scalar Upload

input CollectionInput {
  title: String!
  excerpt: String!
}

input SearchCollectionsFilters {
  author: String
  title: String
  status: CollectionStatus
}

type CollectionAuthorsResult {
  pagination: Pagination
  authors: [CollectionAuthor!]!
}

input CreateCollectionAuthorInput {
  name: String!
  slug: String
  bio: Markdown
  imageUrl: Url
  active: Boolean
}

input UpdateCollectionAuthorInput {
  externalId: String!
  name: String!
  slug: String!
  bio: Markdown
  imageUrl: Url
  active: Boolean
}

input CreateCollectionInput {
  slug: String!
  title: String!
  excerpt: Markdown
  intro: Markdown
  imageUrl: Url
  status: CollectionStatus
  authorExternalId: String!
}

input UpdateCollectionInput {
  externalId: String
  slug: String!
  title: String!
  excerpt: Markdown!
  intro: Markdown
  imageUrl: Url
  status: CollectionStatus!
  authorExternalId: String!
}

input CollectionStoryAuthorInput {
  name: String!
  sortOrder: Int!
}

input CreateCollectionStoryInput {
  collectionExternalId: String!
  url: Url!
  title: String!
  excerpt: Markdown!
  imageUrl: Url!
  authors: [CollectionStoryAuthorInput]!
  publisher: String!
  sortOrder: Int
}

input UpdateCollectionStoryInput {
  externalId: String!
  url: Url!
  title: String!
  excerpt: Markdown!
  imageUrl: Url!
  authors: [CollectionStoryAuthorInput]!
  publisher: String!
  sortOrder: Int
}

input UpdateCollectionStorySortOrderInput {
  externalId: String!
  sortOrder: Int!
}

type CollectionImageUrl {
  url: String!
}

input CollectionImageUploadInput {
  image: Upload!
  width: Int!
  height: Int!
  fileSizeBytes: Int!
}

type Query {
  searchCollections(
    filters: SearchCollectionsFilters!
    page: Int
    perPage: Int
  ): CollectionsResult!
  """
  Retrieves a Collection by externalId.
  """
  getCollection(externalId: String!): Collection
  """
  Retrieves a CollectionAuthor by externalId.
  """
  getCollectionAuthor(externalId: String!): CollectionAuthor
  """
  Retrieves a paged list of CollectionAuthors.
  """
  getCollectionAuthors(page: Int, perPage: Int): CollectionAuthorsResult!
  """
  Retrieves a CollectionStory by a combination of collectionId and url.
  """
  getCollectionStory(externalId: String!): CollectionStory
}

type Mutation {
  """
  Creates a CollectionAuthor.
  """
  createCollectionAuthor(data: CreateCollectionAuthorInput!): CollectionAuthor!
  """
  Updates a CollectionAuthor.
  """
  updateCollectionAuthor(data: UpdateCollectionAuthorInput!): CollectionAuthor!
  """
  Creates a Collection.
  """
  createCollection(data: CreateCollectionInput!): Collection!
  """
  Updates a Collection.
  """
  updateCollection(data: UpdateCollectionInput!): Collection!
  """
  Creates a CollectionStory.
  """
  createCollectionStory(data: CreateCollectionStoryInput!): CollectionStory!
  """
  Updates a CollectionStory.
  """
  updateCollectionStory(data: UpdateCollectionStoryInput!): CollectionStory!
  """
  Updates only the `sortOrder` property of a CollectionStory. Dedicated to ordering stories within the UI.
  """
  updateCollectionStorySortOrder(
    data: UpdateCollectionStorySortOrderInput!
  ): CollectionStory!
  """
  Deletes a CollectionStory. Also deletes all the related CollectionStoryAuthor records.
  """
  deleteCollectionStory(externalId: String!): CollectionStory!
  """
  Uploads an image to S3. Does *not* save the image to any entity (CollectionAuthor/Collection/CollectionStory).
  """
  collectionImageUpload(data: CollectionImageUploadInput!): CollectionImageUrl!
}
