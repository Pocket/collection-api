scalar Upload

input CollectionInput {
  title: String!
  excerpt: String!
}

input SearchCollectionsFilters {
  author: String
  title: String
  status: CollectionStatus
}

type CollectionAuthorsResult {
  pagination: Pagination
  authors: [CollectionAuthor!]!
}

input CreateCollectionAuthorInput {
  name: String!
  slug: String
  bio: Markdown
  imageUrl: Url
  active: Boolean
}

input UpdateCollectionAuthorInput {
  externalId: String!
  name: String!
  slug: String!
  bio: Markdown
  imageUrl: Url
  active: Boolean
}

input UpdateCollectionAuthorImageUrlInput {
  externalId: String!
  imageUrl: Url!
}

input CreateCollectionInput {
  slug: String!
  title: String!
  excerpt: Markdown
  intro: Markdown
  imageUrl: Url
  status: CollectionStatus
  authorExternalId: String!
  curationCategoryExternalId: String
  IABParentCategoryExternalId: String
  IABChildCategoryExternalId: String
}

input UpdateCollectionInput {
  externalId: String
  slug: String!
  title: String!
  excerpt: Markdown!
  intro: Markdown
  imageUrl: Url
  status: CollectionStatus!
  authorExternalId: String!
  curationCategoryExternalId: String
  IABParentCategoryExternalId: String
  IABChildCategoryExternalId: String
}

input UpdateCollectionImageUrlInput {
  externalId: String!
  imageUrl: Url!
}

input CollectionStoryAuthorInput {
  name: String!
  sortOrder: Int!
}

input CreateCollectionStoryInput {
  collectionExternalId: String!
  url: Url!
  title: String!
  excerpt: Markdown!
  imageUrl: Url!
  authors: [CollectionStoryAuthorInput!]!
  publisher: String!
  sortOrder: Int
}

input UpdateCollectionStoryInput {
  externalId: String!
  url: Url!
  title: String!
  excerpt: Markdown!
  imageUrl: Url!
  authors: [CollectionStoryAuthorInput!]!
  publisher: String!
  sortOrder: Int
}

input UpdateCollectionStorySortOrderInput {
  externalId: String!
  sortOrder: Int!
}

input UpdateCollectionStoryImageUrlInput {
  externalId: String!
  imageUrl: Url!
}

type CollectionImageUrl {
  url: String!
}

input CollectionImageUploadInput {
  image: Upload!
  width: Int!
  height: Int!
  fileSizeBytes: Int!
}

"""
Details of a partner company sponsored collections are associated with.
"""
type CollectionPartner {
  externalId: String!
  name: String!
  url: Url!
  imageUrl: Url!
  blurb: Markdown!
}

type CollectionPartnersResult {
  pagination: Pagination
  partners: [CollectionPartner!]!
}

input CreateCollectionPartnerInput {
  name: String!
  url: Url!
  imageUrl: Url!
  blurb: Markdown!
}

input UpdateCollectionPartnerInput {
  externalId: String!
  name: String!
  url: Url!
  imageUrl: Url
  blurb: Markdown!
}

input UpdateCollectionPartnerImageUrlInput {
  externalId: String!
  imageUrl: Url!
}

type Language {
  code: String!
}

type Query {
  searchCollections(
    filters: SearchCollectionsFilters!
    page: Int
    perPage: Int
  ): CollectionsResult!
  """
  Retrieves a Collection by externalId.
  """
  getCollection(externalId: String!): Collection
  """
  Retrieves a CollectionAuthor by externalId.
  """
  getCollectionAuthor(externalId: String!): CollectionAuthor
  """
  Retrieves a paged list of CollectionAuthors.
  """
  getCollectionAuthors(page: Int, perPage: Int): CollectionAuthorsResult!
  """
  Retrieves a CollectionAuthor by externalId.
  """
  getCollectionPartner(externalId: String!): CollectionPartner
  """
  Retrieves a paged list of CollectionAuthors.
  """
  getCollectionPartners(page: Int, perPage: Int): CollectionPartnersResult!
  """
  Retrieves a CollectionStory by a combination of collectionId and url.
  """
  getCollectionStory(externalId: String!): CollectionStory
  """
  Retrieves a list of CurationCategories, sorted alphabetically
  """
  getCurationCategories: [CurationCategory!]!
  """
  Retrieves the nested list of IAB top/sub categories.
  """
  getIABCategories: [IABParentCategory!]!
  """
  Retrieves the languages currently supported.
  """
  getLanguages: [Language!]!
}

type Mutation {
  """
  Creates a CollectionAuthor.
  """
  createCollectionAuthor(data: CreateCollectionAuthorInput!): CollectionAuthor!
  """
  Updates a CollectionAuthor.
  """
  updateCollectionAuthor(data: UpdateCollectionAuthorInput!): CollectionAuthor!
  """
  Updates only the `imageUrl` property of a CollectionAuthor. Dedicated to uploading images within the UI.
  """
  updateCollectionAuthorImageUrl(
    data: UpdateCollectionAuthorImageUrlInput!
  ): CollectionAuthor!
  """
  Creates a Collection.
  """
  createCollection(data: CreateCollectionInput!): Collection!
  """
  Updates a Collection.
  """
  updateCollection(data: UpdateCollectionInput!): Collection!
  """
  Updates only the `imageUrl` property of a Collection. Dedicated to uploading images within the UI.
  """
  updateCollectionImageUrl(data: UpdateCollectionImageUrlInput!): Collection!
  """
  Creates a CollectionStory.
  """
  createCollectionStory(data: CreateCollectionStoryInput!): CollectionStory!
  """
  Updates a CollectionStory.
  """
  updateCollectionStory(data: UpdateCollectionStoryInput!): CollectionStory!
  """
  Updates only the `sortOrder` property of a CollectionStory. Dedicated to ordering stories within the UI.
  """
  updateCollectionStorySortOrder(
    data: UpdateCollectionStorySortOrderInput!
  ): CollectionStory!
  """
  Updates only the `imageUrl` property of a CollectionStory. Dedicated to uploading images within the UI.
  """
  updateCollectionStoryImageUrl(
    data: UpdateCollectionStoryImageUrlInput!
  ): CollectionStory!
  """
  Deletes a CollectionStory. Also deletes all the related CollectionStoryAuthor records.
  """
  deleteCollectionStory(externalId: String!): CollectionStory!
  """
  Uploads an image to S3. Does *not* save the image to any entity (CollectionAuthor/Collection/CollectionStory).
  """
  collectionImageUpload(data: CollectionImageUploadInput!): CollectionImageUrl!
  """
  Creates a CollectionPartner.
  """
  createCollectionPartner(
    data: CreateCollectionPartnerInput!
  ): CollectionPartner!
  """
  Updates a CollectionPartner.
  """
  updateCollectionPartner(
    data: UpdateCollectionPartnerInput!
  ): CollectionPartner!
  """
  Updates only the `imageUrl` property of a CollectionPartner. Dedicated to uploading images within the UI.
  """
  updateCollectionPartnerImageUrl(
    data: UpdateCollectionPartnerImageUrlInput!
  ): CollectionPartner!
}
