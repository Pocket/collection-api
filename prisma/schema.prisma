generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CollectionLanguage {
  EN
  DE
}

model IABCategory {
  id                Int           @id @default(autoincrement())
  externalId        String        @default(uuid()) @db.VarChar(255)
  name              String        @db.VarChar(255)
  slug              String        @db.VarChar(255)
  createdAt         DateTime      @default(now()) @db.Timestamp(0)
  updatedAt         DateTime      @updatedAt
  IABCategoryId     Int?
  // parent and children define the one-to-many relationship with this table
  parent            IABCategory?  @relation("IABCategoryChildren", fields: [IABCategoryId], references: [id])
  children          IABCategory[] @relation("IABCategoryChildren")
  // these declarations are required to map to the top/sub categories defined in the Collection model below
  parentCollections Collection[]  @relation("CollectionIABParentCategory")
  childCollections  Collection[]  @relation("CollectionIABChildCategory")

  @@unique([externalId])
  @@index([IABCategoryId])
}

model CollectionStoryAuthor {
  externalId        String          @id @default(uuid()) @db.VarChar(255)
  name              String          @db.VarChar(255)
  collectionStoryId Int
  sortOrder         Int             @default(0)
  collectionStory   CollectionStory @relation(fields: [collectionStoryId], references: [id], onDelete: Cascade)

  @@index([collectionStoryId])
}

model CollectionStory {
  id           Int                     @id @default(autoincrement())
  externalId   String                  @default(uuid()) @db.VarChar(255)
  collectionId Int
  url          String                  @db.VarChar(500)
  title        String                  @db.VarChar(255)
  excerpt      String                  @db.Text
  imageUrl     String                  @db.VarChar(500)
  publisher    String                  @db.VarChar(255)
  sortOrder    Int                     @default(0)
  createdAt    DateTime                @default(now()) @db.Timestamp(0)
  updatedAt    DateTime                @updatedAt
  authors      CollectionStoryAuthor[]
  fromPartner  Boolean                 @default(false)
  collection   Collection              @relation(fields: [collectionId], references: [id])

  @@unique([collectionId, url])
  @@unique([externalId])
  @@index([collectionId])
  @@index([url])
}

model Image {
  id            Int               @id @default(autoincrement())
  entityId      Int?
  entityType    ImageEntityType?
  sizeCategory  ImageSizeCategory @default(LARGE)
  width         Int
  height        Int
  mimeType      String            @db.VarChar(255)
  fileSizeBytes Int
  fileName      String            @db.VarChar(255)
  path          String            @db.VarChar(255)
  createdAt     DateTime          @default(now()) @db.DateTime(0)
  updatedAt     DateTime          @updatedAt

  @@unique([path])
  @@index([entityId, entityType])
}

model CollectionAuthor {
  id          Int          @id @default(autoincrement())
  externalId  String       @default(uuid()) @db.VarChar(255)
  name        String       @unique @db.VarChar(255)
  slug        String?      @db.VarChar(300)
  bio         String?      @db.Text
  imageUrl    String?      @db.VarChar(500)
  createdAt   DateTime     @default(now()) @db.DateTime(0)
  updatedAt   DateTime     @updatedAt
  active      Boolean?     @default(true)
  collections Collection[]

  @@unique([externalId])
  @@index([name])
}

model Label {
  id          Int               @id @default(autoincrement())
  externalId  String            @default(uuid()) @db.VarChar(255)
  name        String            @unique @db.VarChar(255)
  createdAt   DateTime          @default(now()) @db.DateTime(0)
  createdBy   String            @db.VarChar(255)
  updatedAt   DateTime          @updatedAt
  updatedBy   String?           @db.VarChar(255)
  collections CollectionLabel[]


  @@unique([externalId])
  @@index([name])
}

model CollectionLabel {
  labelId      Int
  collectionId Int
  createdAt    DateTime @default(now()) @db.DateTime(0)
  createdBy    String   @db.VarChar(255)


  label      Label      @relation(fields: [labelId], references: [id])
  collection Collection @relation(fields: [collectionId], references: [id])

  @@id([labelId, collectionId])
}

model Collection {
  id                  Int                    @id @default(autoincrement())
  externalId          String                 @default(uuid()) @db.VarChar(255)
  slug                String                 @unique @db.VarChar(300)
  title               String                 @db.VarChar(255)
  excerpt             String?                @db.Text
  intro               String?                @db.Text
  imageUrl            String?                @db.VarChar(500)
  language            CollectionLanguage     @default(EN)
  publishedAt         DateTime?              @db.DateTime(0)
  createdAt           DateTime               @default(now()) @db.DateTime(0)
  updatedAt           DateTime               @updatedAt
  curationCategoryId  Int?
  IABParentCategoryId Int?
  IABChildCategoryId  Int?
  status              CollectionStatus?      @default(DRAFT)
  authors             CollectionAuthor[]
  stories             CollectionStory[]
  curationCategory    CurationCategory?      @relation(fields: [curationCategoryId], references: [id])
  IABParentCategory   IABCategory?           @relation("CollectionIABParentCategory", fields: [IABParentCategoryId], references: [id])
  IABChildCategory    IABCategory?           @relation("CollectionIABChildCategory", fields: [IABChildCategoryId], references: [id])
  partnership         CollectionPartnership?
  labels              CollectionLabel[]

  @@unique([externalId])
  @@index([slug])
  @@index([title])
}

model CurationCategory {
  id          Int          @id @default(autoincrement())
  externalId  String       @default(uuid()) @db.VarChar(255)
  slug        String       @unique @db.VarChar(300)
  name        String       @db.VarChar(255)
  collections Collection[]

  @@unique([externalId])
}

model CollectionPartner {
  id           Int                     @id @default(autoincrement())
  externalId   String                  @default(uuid()) @db.VarChar(255)
  name         String                  @db.VarChar(500)
  url          String                  @db.VarChar(500)
  imageUrl     String                  @db.VarChar(500)
  blurb        String                  @db.Text
  partnerships CollectionPartnership[]

  @@unique([externalId])
}

model CollectionPartnership {
  id           Int                       @id @default(autoincrement())
  externalId   String                    @default(uuid()) @db.VarChar(255)
  type         CollectionPartnershipType @default(PARTNERED)
  partnerId    Int
  collectionId Int                       @unique
  name         String?                   @db.VarChar(500)
  url          String?                   @db.VarChar(500)
  imageUrl     String?                   @db.VarChar(500)
  blurb        String?                   @db.Text
  partner      CollectionPartner         @relation(fields: [partnerId], references: [id])
  collection   Collection                @relation(fields: [collectionId], references: [id])

  @@unique([externalId])
}

enum ImageEntityType {
  COLLECTION
  COLLECTION_STORY
  COLLECTION_AUTHOR
  COLLECTION_PARTNER
  COLLECTION_PARTNERSHIP
}

enum ImageSizeCategory {
  SMALL
  MEDIUM
  LARGE
}

enum CollectionStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum CollectionPartnershipType {
  PARTNERED
  SPONSORED
}
