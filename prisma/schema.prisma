generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model IABCategory {
  id                Int           @id @default(autoincrement())
  externalId        String        @default(uuid()) @db.VarChar(255)
  name              String        @db.VarChar(255)
  slug              String        @db.VarChar(255)
  createdAt         DateTime      @default(now()) @db.Timestamp(0)
  updatedAt         DateTime      @updatedAt
  IABCategoryId     Int?
  // parent and children define the one-to-many relationship with this table
  parent            IABCategory?  @relation("CategoryChildren", fields: [IABCategoryId], references: [id])
  children          IABCategory[] @relation("CategoryChildren")
  // these declarations are required to map to the top/sub categories defined in the Collection model below
  topCollections    Collection[]  @relation("IABTopCategory")
  subCollections    Collection[]  @relation("IABSubCategory")

  @@index([IABCategoryId], name: "IABCategoryId")
  @@unique([externalId], name: "externalId")
}

model CollectionStoryAuthor {
  externalId        String          @id @default(uuid()) @db.VarChar(255)
  name              String          @db.VarChar(255)
  collectionStoryId Int
  sortOrder         Int             @default(0)
  collectionStory   CollectionStory @relation(fields: [collectionStoryId], references: [id])

  @@index([collectionStoryId], name: "collectionStoryId")
}

model CollectionStory {
  id           Int                     @id @default(autoincrement())
  externalId   String                  @default(uuid()) @db.VarChar(255)
  collectionId Int
  url          String                  @db.VarChar(500)
  title        String                  @db.VarChar(255)
  excerpt      String                  @db.Text
  imageUrl     String                  @db.VarChar(500)
  publisher    String                  @db.VarChar(255)
  sortOrder    Int                     @default(0)
  createdAt    DateTime                @default(now()) @db.Timestamp(0)
  updatedAt    DateTime                @updatedAt
  authors      CollectionStoryAuthor[]
  collection   Collection              @relation(fields: [collectionId], references: [id])

  @@unique([collectionId, url], name: "collectionIdUrl")
  @@unique([externalId], name: "externalId")
  @@index([collectionId], name: "collectionId")
  @@index([url], name: "url")
}

model Image {
  id            Int               @id @default(autoincrement())
  entityId      Int?
  entityType    ImageEntityType?
  sizeCategory  ImageSizeCategory @default(LARGE)
  width         Int
  height        Int
  mimeType      String            @db.VarChar(255)
  fileSizeBytes Int
  fileName      String            @db.VarChar(255)
  path          String            @db.VarChar(255)
  createdAt     DateTime          @default(now()) @db.DateTime(0)
  updatedAt     DateTime          @updatedAt

  @@unique([path], name: "path")
  @@index([entityId, entityType], name: "entityIdEntityType")
}

model CollectionAuthor {
  id          Int          @id @default(autoincrement())
  externalId  String       @default(uuid()) @db.VarChar(255)
  name        String       @unique @db.VarChar(255)
  slug        String?      @db.VarChar(300)
  bio         String?      @db.Text
  imageUrl    String?      @db.VarChar(500)
  createdAt   DateTime     @default(now()) @db.DateTime(0)
  updatedAt   DateTime     @updatedAt
  active      Boolean?     @default(true)
  collections Collection[]

  @@unique([externalId], name: "externalId")
  @@index([name], name: "name")
}

model Collection {
  id                 Int                @id @default(autoincrement())
  externalId         String             @default(uuid()) @db.VarChar(255)
  slug               String             @unique @db.VarChar(300)
  title              String             @db.VarChar(255)
  excerpt            String?            @db.Text
  intro              String?            @db.Text
  imageUrl           String?            @db.VarChar(500)
  publishedAt        DateTime?          @db.DateTime(0)
  createdAt          DateTime           @default(now()) @db.DateTime(0)
  updatedAt          DateTime           @updatedAt
  curationCategoryId Int?
  IABTopCategoryId   Int?
  IABSubCategoryId   Int?
  status             CollectionStatus?  @default(DRAFT)
  authors            CollectionAuthor[]
  stories            CollectionStory[]
  curationCategory   CurationCategory?  @relation(fields: [curationCategoryId], references: [id])
  IABTopCategory     IABCategory?       @relation("IABTopCategory", fields: [IABTopCategoryId], references: [id])
  IABSubCategory     IABCategory?       @relation("IABSubCategory", fields: [IABSubCategoryId], references: [id])

  @@unique([externalId], name: "externalId")
  @@index([slug], name: "slug")
  @@index([title], name: "title")
}

model CurationCategory {
  id         Int    @id @default(autoincrement())
  externalId String @default(uuid()) @db.VarChar(255)
  slug       String @unique @db.VarChar(300)
  name       String @db.VarChar(255)

  @@unique([externalId], name: "externalId")
  collections Collection[]
}

enum ImageEntityType {
  COLLECTION
  COLLECTION_STORY
  COLLECTION_AUTHOR
}

enum ImageSizeCategory {
  SMALL
  MEDIUM
  LARGE
}

enum CollectionStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
