version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr: circleci/aws-ecr@6.10.0
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@1.0.0
  queue: eddiewebb/queue@1.5.0

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  apollo:
    docker:
      - image: circleci/node:15
    steps:
      - checkout
      - run:
          name: install apollo
          # CircleCI needs global installs to be sudo
          command: |
            sudo npm install -g apollo
      - run:
          name: build public schema
          # We have to send one file for the federated schema which means we have to concat our shared scheme
          # to the public schema before pushing up to apollo studio (this happens in the next step)
          command: cat schema-shared.graphql schema-public.graphql > schema.graphql
      - run:
          name: check service
          command: apollo service:check --graph=pocket-client-api --localSchemaFile=schema.graphql --serviceName=collection --variant=current
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service
                command: apollo service:push --graph=pocket-client-api --localSchemaFile=schema.graphql --serviceURL=https://collection-api.readitlater.com/ --serviceName=collection --variant=current

  build:
    docker:
      - image: circleci/node:15
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm install
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: generate prisma client
          command: npm run db:generate-client
      - run:
          name:
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json Dockerfile schema*.graphql ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    description: Run integration tests against external services, e.g. MySQL
    docker:
      - image: circleci/node:15
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
      - image: mysql:5.7
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          TZ: 'UTC'
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm install
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run migrate:reset -- --skip-seed --force
            npm run test-integrations

  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
    docker:
      - image: pocket/ops-cli:v0.0.5
    steps:
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                path: /tmp/workspace/app_prod
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                path: /tmp/workspace/app_prod
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}

workflows:
  all:
    jobs:
#      - pocket/node_mocha_ts_test:
#          <<: *not_main
#          name: test

      - test_integrations:
          <<: *not_main
          name: test_integrations

      - apollo

      - build

      # Try building the ECS docker image on each branch
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: collectionapi-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: collectionapi-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      - queue/block_workflow:
          <<: *only_dev_main
          name: wait_for_deploy_queue
          time: '30'

      - aws-ecs/deploy-service-update:
          <<: *only_dev
          context: pocket
          name: deploy_ecs_dev
          family: 'CollectionAPI-Dev'
          cluster-name: 'CollectionAPI-Dev'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'CollectionAPI-Dev-ECS'
          codedeploy-deployment-group-name: 'CollectionAPI-Dev-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 4002
          container-image-name-updates: 'container=app,image-and-tag=410318598490.dkr.ecr.us-east-1.amazonaws.com/collectionapi-dev-app:$CIRCLE_SHA1'
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          verify-revision-is-deployed: true
          verification-timeout: '30'
          requires:
            - build_docker_dev
            - wait_for_deploy_queue

      # Build & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: collectionapi-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      - aws-ecs/deploy-service-update:
          <<: *only_main
          name: deploy_ecs_prod
          context: pocket
          family: 'CollectionAPI-Prod'
          cluster-name: 'CollectionAPI-Prod'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'CollectionAPI-Prod-ECS'
          codedeploy-deployment-group-name: 'CollectionAPI-Prod-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 4002
          container-image-name-updates: 'container=app,image-and-tag=996905175585.dkr.ecr.us-east-1.amazonaws.com/collectionapi-prod-app:$CIRCLE_SHA1'
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          verify-revision-is-deployed: true
          verification-timeout: '30'
          requires:
            - build_docker_prod
            - wait_for_deploy_queue

      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: CollectionAPI

      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: CollectionAPI

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/collection-api
          sentry_project_name: collection-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_ecs_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/collection-api
          sentry_project_name: collection-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_ecs_dev

