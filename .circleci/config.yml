version: 2.1

orbs:
  pocket: pocket/circleci-orbs@1.2.5
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  apollo:
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
    steps:
      - checkout
      - run:
          name: install rover
          # CircleCI needs global installs to be sudo
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.1.0 | sh

            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: build public schema
          # We have to send one file for the federated schema which means we have to concat our shared schema
          # to the public schema before pushing up to apollo studio (this happens in the next step)
          command: cat schema-shared.graphql schema-public.graphql > schema-client-api.graphql
      - run:
          name: build admin schema
          # We have to send one file for the federated schema which means we have to concat our shared schema
          # to the admin schema before pushing up to apollo studio (this happens in the next step)
          command: cat schema-shared.graphql schema-admin.graphql > schema-admin-api.graphql
      - run:
          name: check service - client-api
          command:
            rover subgraph check pocket-client-api@current --schema ./schema-client-api.graphql --name=collection
      - run:
          name: check service - admin-api
          # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
          # so we specifically override the APOLLO_KEY value here
          command: |
            export APOLLO_KEY=$ADMIN_APOLLO_KEY
            rover subgraph check pocket-admin-api@current --schema ./schema-admin-api.graphql --name=collection
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to prod client-api
                command: rover subgraph publish pocket-client-api@current --schema ./schema-client-api.graphql --routing-url https://collection-api.readitlater.com/ --name=collection
            - run:
                name: push service to prod admin-api
                # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
                # so we specifically override the APOLLO_KEY value here
                command: |
                  export APOLLO_KEY=$ADMIN_APOLLO_KEY
                  rover subgraph publish pocket-admin-api@current --schema ./schema-admin-api.graphql --routing-url https://collection-api.readitlater.com/admin --name=collection
      - when:
          condition:
            equal: [dev, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service to dev client-api
                command: rover subgraph publish pocket-client-api@development --schema ./schema-client-api.graphql --routing-url https://collection-api.getpocket.dev/ --name=collection
            - run:
                name: push service to dev admin-api
                # rover expects an APOLLO_KEY env var, which is set in circleci. however, there's a different key for admin-api,
                # so we specifically override the APOLLO_KEY value here
                command: |
                  export APOLLO_KEY=$ADMIN_APOLLO_KEY
                  rover subgraph publish pocket-admin-api@development --schema ./schema-admin-api.graphql --routing-url https://collection-api.getpocket.dev/admin --name=collection

  build:
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      #Validate backstage entity.
      #Eventually this should be its own job, but they need to fix it, or we add it to our circleci orbs
      - backstage-entity-validator/validate:
          path: catalog-info.yaml
      - run:
          name: install node modules
          command: npm install
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: generate prisma client
          command: npm run db:generate-client
      - run:
          name:
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            rm -rf ./prisma/seed.ts
            cp -r ./node_modules package.json Dockerfile schema*.graphql ./prisma ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    description: Run integration tests against external services, e.g. MySQL
    parameters:
      command:
        description: 'Test scripts to run'
        type: string
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
      - image: mysql:5.7@sha256:c8f68301981a7224cc9c063fc7a97b6ef13cfc4142b4871d1a35c95777ce96f4
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          TZ: 'UTC'
      - image: localstack/localstack@sha256:11e9cfc37de97bff2798a68c934594bfdad96cb08bebfd44325b53e9915d0df1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: 's3'
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
          PORT_WEB_UI: 8080
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm install
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db --aws
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run migrate:reset -- --skip-seed --force
            << parameters.command >>

workflows:
  all:
    jobs:
      - pocket/node_mocha_ts_test:
          <<: *not_main
          name: test_specs

      - test_integrations:
          <<: *not_main
          name: test_integrations
          command: 'npm run test-integrations'

      - apollo

      - build

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: collectionapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: CollectionAPI-Dev
          codebuild-project-branch: main
          repo-name: collectionapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: CollectionAPI-Dev-CodePipeline
          codebuild-project-name: CollectionAPI-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: CollectionAPI-Prod
          codebuild-project-branch: main
          repo-name: collectionapi-prod-app
          ecr-url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: CollectionAPI-Prod-CodePipeline
          codebuild-project-name: CollectionAPI-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: CollectionAPI

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: CollectionAPI

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/collection-api
          sentry_project_name: collection-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/collection-api
          sentry_project_name: collection-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
