// adapted from https://github.com/catalystsquad/terraform-aws-catalyst-platform/blob/main/assets/default-synthetics-lambda-function/index.js
const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();
const syntheticsLogHelper = require('SyntheticsLogHelper');

const checkPage = async function () {
  // check if the URL environment variable is set
  if (!('URL' in process.env)) {
    throw new Error('Missing URL environment variable!');
  }

  let url = process.env.URL;

  syntheticsConfiguration.disableStepScreenshots();
  syntheticsConfiguration.setConfig({
    continueOnStepFailure: true,
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    restrictedHeaders: [],
    restrictedUrlParameters: [],
  });

  let page = await synthetics.getPage();

  await loadUrl(page, url);
};

const loadUrl = async function (page, url) {
  let stepName = null;
  let domcontentloaded = false;

  try {
    stepName = new URL(url).hostname;
  } catch (error) {
    const errorString = `Error parsing url: ${url}.  ${error}`;
    log.error(errorString);
    // throw error is can't parse URL
    throw error;
  }

  await synthetics.executeStep(stepName, async function () {
    const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);
    const response = await page.goto(url, {
      waitUntil: ['domcontentloaded'],
      timeout: 30000,
    });
    if (response) {
      domcontentloaded = true;
      const status = response.status();
      const statusText = response.statusText();

      // If the response status code is not a 2xx success code
      if (status < 200 || status > 299) {
        throw `Failed to load url: ${sanitizedUrl} ${status} ${statusText}`;
      }

      const logResponseString = `Response from url: ${sanitizedUrl}  Status: ${status}  Status Text: ${statusText}`;
      console.log(logResponseString);
    } else {
      const logNoResponseString = `No response returned for url: ${sanitizedUrl}`;
      log.error(logNoResponseString);
      throw new Error(logNoResponseString);
    }
  });
};

exports.handler = async () => {
  return await checkPage();
};
